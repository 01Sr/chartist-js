{"version":3,"file":"chartist-0.0.5.line.min.js","sources":["../source/scripts/chartist.line.js"],"names":["document","window","Chartist","undefined","Line","query","data","options","responsiveOptions","createChart","createSeries","seriesGroup","projectPointFnc","point","p","path","x","y","lineSmooth","showPoint","paper","line","node","setAttribute","classNames","append","i","length","showLine","snapPath","prepend","projectPoint","index","chartRect","x1","width","y1","bounds","range","height","min","xAxisOffset","yAxisOffset","seriesGroups","clear","getBounds","dataArray","axisX","offset","showLabel","calculateLabelOffset","labels","label","horizontal","join","labelInterpolationFnc","getHeight","axisY","values","getWidth","createChartRect","g","grid","interpolateData","interpolatedValue","pos","showGrid","y2","add","text","attr","x2","vertical","labelAlign","chartPadding","text-anchor","series","className","alphaNumerate","currentOptions","defaultOptions","noop","scaleMinSpace","container","querySelector","normalizeDataArray","getDataArray","Snap","appendChild","optionsProvider","changedOptions","addEventListener","version","update"],"mappings":"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","sourcesContent":["// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Line = Chartist.Line || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 0,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 5,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 20\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      container = document.querySelector(query),\n      paper,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length),\n      i;\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Clear the stage\n      paper.clear();\n\n      // initialize bounds\n      bounds = Chartist.getBounds(paper, dataArray, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(paper, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = paper.g(),\n        grid = paper.g();\n\n      // Create X-Axis\n      Chartist.interpolateData(data.labels, options.axisX.labelInterpolationFnc, function (data, index, interpolatedValue) {\n        var pos = chartRect.x1 + chartRect.width() / data.length * index;\n\n        if (options.axisX.showGrid) {\n          var line = paper.line(pos, chartRect.y1, pos, chartRect.y2);\n          line.node.setAttribute('class', [options.classNames.grid, options.classNames.horizontal].join(' '));\n          grid.add(line);\n        }\n\n        if (options.axisX.showLabel) {\n          // Use config offset for setting labels of\n          var label = paper.text(pos + 2, 0, '' + interpolatedValue);\n          label.node.setAttribute('class', [options.classNames.label, options.classNames.horizontal].join(' '));\n\n          // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n          label.attr({\n            y: chartRect.y1 + Chartist.getHeight(label.node) + options.axisX.offset\n          });\n\n          labels.add(label);\n        }\n      });\n\n      // Create Y-Axis\n      Chartist.interpolateData(bounds.values, options.axisY.labelInterpolationFnc, function (data, index, interpolatedValue) {\n        var pos = chartRect.y1 - chartRect.height() / data.length * index;\n\n        if (options.axisY.showGrid) {\n          var line = paper.line(chartRect.x1, pos, chartRect.x2, pos);\n          line.node.setAttribute('class', options.classNames.grid + ' ' + options.classNames.vertical);\n          grid.add(line);\n        }\n\n        if (options.axisY.showLabel) {\n          // Position later\n          //TODO: make padding of 2px configurable\n          var label = paper.text(options.axisY.labelAlign === 'right' ? yAxisOffset - options.axisY.offset + options.chartPadding : options.chartPadding,\n            pos - 2, '' + interpolatedValue);\n          label.node.setAttribute('class', options.classNames.label + ' ' + options.classNames.vertical);\n\n          // Set text-anchor based on alignment\n          label.attr({\n            'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n          });\n\n          labels.add(label);\n        }\n      });\n\n      function createSeries(data, seriesGroup, projectPointFnc) {\n        var p = projectPointFnc(data, 0),\n          path = 'M' + p.x + ',' + p.y + ' ' + (options.lineSmooth ? 'R' : 'L'),\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          point = paper.line(p.x, p.y, p.x, p.y);\n          point.node.setAttribute('class', options.classNames.point);\n          seriesGroup.append(point);\n        }\n\n        // First point is created, continue with rest\n        for (var i = 1; i < data.length; i++) {\n          p = projectPointFnc(data, i);\n          path += ' ' + p.x + ',' + p.y;\n\n          //If we should show points we need to create them now to avoid secondary loop\n          if (options.showPoint) {\n            point = paper.line(p.x, p.y, p.x, p.y);\n            point.node.setAttribute('class', options.classNames.point);\n            seriesGroup.append(point);\n          }\n        }\n\n        if (options.showLine) {\n          var snapPath = paper.path(path);\n          snapPath.node.setAttribute('class', options.classNames.line);\n          seriesGroup.prepend(snapPath);\n        }\n      }\n\n      function projectPoint(data, index) {\n        return {\n          x: chartRect.x1 + chartRect.width() / data.length * index,\n          y: chartRect.y1 - data[index] / bounds.range * chartRect.height() + (bounds.min / bounds.range * chartRect.height())\n        };\n      }\n\n      // Draw the series\n      // initialize series groups\n      for (i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = paper.g();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].node.setAttribute('class', options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        createSeries(data.series[i].data, seriesGroups[i], projectPoint);\n\n        paper.add(seriesGroups[i]);\n      }\n    }\n\n\n    // Do important checks and throw if necessary\n    if (!container) {\n      throw 'Container node with selector \"' + query + '\" not found';\n    }\n\n    paper = Snap(options.width || '100%', options.height || '100%');\n    if (!paper) {\n      throw 'Could not instantiate Snap.js!';\n    }\n    container.appendChild(paper.node);\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}