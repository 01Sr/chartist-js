{"version":3,"file":"chartist-0.1.1.pie.min.js","sources":["../source/scripts/chartist.pie.js"],"names":["document","window","Chartist","undefined","Pie","query","data","options","responsiveOptions","createChart","chartRect","radius","totalDataSum","seriesGroups","startAngle","paper","createPaper","width","height","createChartRect","Math","min","total","dataArray","reduce","previousValue","currentValue","donut","donutWidth","center","x","x1","y","y2","i","series","length","g","node","setAttribute","classNames","className","alphaNumerate","endAngle","start","polarToCartesian","end","arcSweep","d","push","path","join","slice","add","currentOptions","defaultOptions","chartPadding","getDataArray","optionsProvider","changedOptions","addEventListener","version","update"],"mappings":";;;;;CACC,SAAUA,EAAUC,EAAQC,EAAUC,GACrC,YACAD,GAASE,IAAMF,EAASE,KAAO,SAAUC,EAAOC,EAAMC,EAASC,GAoB7D,QAASC,GAAYF,GACnB,GACEG,GACAC,EACAC,EAHEC,KAIFC,EAAaP,EAAQO,UAGvBC,GAAQb,EAASc,YAAYX,EAAOE,EAAQU,MAAOV,EAAQW,QAE3DR,EAAYR,EAASiB,gBAAgBJ,EAAOR,EAAS,EAAG,GAExDI,EAASS,KAAKC,IAAIX,EAAUO,QAAU,EAAGP,EAAUQ,SAAW,GAE9DN,EAAeL,EAAQe,OAASC,EAAUC,OAAO,SAASC,EAAeC,GACvE,MAAOD,GAAgBC,EAAa,IACnC,GAKHf,GAAUJ,EAAQoB,MAAQpB,EAAQqB,WAAa,EAAK,CAUpD,KAAK,GAPDC,IACFC,EAAGpB,EAAUqB,GAAKrB,EAAUO,QAAU,EACtCe,EAAGtB,EAAUuB,GAAKvB,EAAUQ,SAAW,GAKhCgB,EAAI,EAAGA,EAAI5B,EAAK6B,OAAOC,OAAQF,IAAK,CAC3CrB,EAAaqB,GAAKnB,EAAMsB,IAExBxB,EAAaqB,GAAGI,KAAKC,aAAa,QAAShC,EAAQiC,WAAWL,OAAS,KACpE7B,EAAK6B,OAAOD,GAAGO,WAAalC,EAAQiC,WAAWL,OAAS,IAAMjC,EAASwC,cAAcR,IAExF,IAAIS,GAAW7B,EAAaS,EAAUW,GAAG,GAAKtB,EAAe,GAG1D+B,GAAW7B,IAAe,MAC3B6B,GAAY,IAGd,IAAIC,GAAQ1C,EAAS2C,iBAAiBhB,EAAOC,EAAGD,EAAOG,EAAGrB,EAAQG,GAAoB,IAANoB,EAAU,EAAI,KAC9FY,EAAM5C,EAAS2C,iBAAiBhB,EAAOC,EAAGD,EAAOG,EAAGrB,EAAQgC,GAC5DI,EAAoC,KAAzBJ,EAAW7B,EAAoB,IAAM,IAChDkC,GAEE,IAAKF,EAAIhB,EAAGgB,EAAId,EAEhB,IAAKrB,EAAQA,EAAQ,EAAGoC,EAAU,EAAGH,EAAMd,EAAGc,EAAMZ,EAInDzB,GAAQoB,SAAU,GACnBqB,EAAEC,KAAK,IAAKpB,EAAOC,EAAGD,EAAOG,EAI/B,IAAIkB,GAAOnC,EAAMmC,KAAKF,EAAEG,KAAK,KAG7BD,GAAKZ,KAAKC,aAAa,QAAShC,EAAQiC,WAAWY,OAAS7C,EAAQoB,MAAQ,IAAMpB,EAAQiC,WAAWb,MAAQ,KAE1GpB,EAAQoB,SAAU,GACnBuB,EAAKZ,KAAKC,aAAa,QAAS,mBAAqBhC,EAAQqB,WAAc,MAG7Ef,EAAaqB,GAAGmB,IAAIH,GACpBnC,EAAMsC,IAAIxC,EAAaqB,IAIvBpB,EAAa6B,GA5FjB,GAcEW,GACAvC,EAfEwC,GACAtC,MAAOd,EACPe,OAAQf,EACRqD,aAAc,EACdhB,YACEL,OAAQ,YACRiB,MAAO,WACPzB,MAAO,YAETb,WAAY,EACZQ,MAAOnB,EACPwB,OAAO,EACPC,WAAY,IAIdL,EAAYrB,EAASuD,aAAanD,EAkGpC,OAhBAgD,GAAiBpD,EAASwD,gBAAgBH,EAAgBhD,EAASC,EAAmB,SAAUmD,GAC9FL,EAAiBK,EACjBlD,EAAY6C,KASdrD,EAAO2D,iBAAiB,SAAU,WAChCnD,EAAY6C,MAKZO,QAAS3D,EAAS2D,QAClBC,OAAQ,WACNrD,EAAY6C,OAIlBtD,SAAUC,OAAQA,OAAOC","sourcesContent":["// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Pie = Chartist.Pie || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        classNames: {\n          series: 'ct-series',\n          slice: 'ct-slice',\n          donut: 'ct-donut'\n        },\n        startAngle: 0,\n        total: undefined,\n        donut: false,\n        donutWidth: 60\n      },\n      currentOptions,\n      paper,\n      dataArray = Chartist.getDataArray(data);\n\n    function createChart(options) {\n      var seriesGroups = [],\n        chartRect,\n        radius,\n        totalDataSum,\n        startAngle = options.startAngle;\n\n      // Create new paper the stage\n      paper = Chartist.createPaper(query, options.width, options.height);\n      // Calculate charting rect\n      chartRect = Chartist.createChartRect(paper, options, 0, 0);\n      // Get biggest circle radius possible within chartRect\n      radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);\n      // Calculate total of all series to get reference value or use total reference from optional options\n      totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {\n        return previousValue + currentValue[0];\n      }, 0);\n\n      // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside\n      // Unfortunately this is not possible with the current SVG Spec\n      // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html\n      radius -= options.donut ? options.donutWidth / 2  : 0;\n\n      // Calculate end angle based on total sum and current data value and offset with padding\n      var center = {\n        x: chartRect.x1 + chartRect.width() / 2,\n        y: chartRect.y2 + chartRect.height() / 2\n      };\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = paper.g();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].node.setAttribute('class', options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var endAngle = startAngle + dataArray[i][0] / totalDataSum * 360;\n        // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle\n        // with Z and use 359.99 degrees\n        if(endAngle - startAngle === 360) {\n          endAngle -= 0.01;\n        }\n\n        var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)),\n        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle),\n        arcSweep = endAngle - startAngle <= 180 ? '0' : '1',\n        d =  [\n          // Start at the end point from the cartesian coordinates\n          'M', end.x, end.y,\n          // Draw arc\n          'A', radius, radius, 0, arcSweep, 0, start.x, start.y\n        ];\n\n        // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie\n        if(options.donut === false) {\n          d.push('L', center.x, center.y);\n        }\n\n        // Create the SVG path with snap\n        var path = paper.path(d.join(' '));\n\n        // If this is a donut chart we add the donut class, otherwise just a regular slice\n        path.node.setAttribute('class', options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));\n\n        if(options.donut === true) {\n          path.node.setAttribute('style', 'stroke-width: ' + (+options.donutWidth) + 'px');\n        }\n\n        seriesGroups[i].add(path);\n        paper.add(seriesGroups[i]);\n\n        // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues\n        // (except for last slice)\n        startAngle = endAngle;\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}