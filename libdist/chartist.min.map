{"version":3,"file":"chartist.min.js","sources":["../source/scripts/chartist.core.js","../source/scripts/chartist.line.js","../source/scripts/chartist.bar.js","../source/scripts/chartist.pie.js"],"names":["root","factory","exports","module","define","amd","Chartist","this","version","noop","n","alphaNumerate","String","fromCharCode","extend","target","source","prop","svg","name","attributes","className","parent","attr","node","Object","keys","forEach","key","setAttribute","elem","parentNode","document","createElementNS","svgns","_ctSvgElement","appendChild","addClass","text","t","createTextNode","empty","firstChild","removeChild","remove","classes","getAttribute","trim","split","names","concat","filter","pos","self","indexOf","join","removeClass","removedClasses","_node","undefined","_parent","getHeight","svgElement","clientHeight","Math","round","getBBox","height","getWidth","clientWidth","width","createSvg","query","container","nodeType","querySelector","_ctChart","getDataArray","data","array","i","series","length","normalizeDataArray","dataArray","j","orderOfMagnitude","value","floor","log","abs","LN10","projectLength","bounds","options","availableHeight","getAvailableHeight","range","chartPadding","axisX","offset","getHighLow","highLow","high","Number","MAX_VALUE","low","getBounds","normalizedData","referenceValue","newMin","newMax","max","min","valueRange","oom","pow","ceil","step","numberOfSteps","axisY","scaleMinSpace","values","push","calculateLabelOffset","labelClass","labelInterpolationFnc","offsetFnc","interpolated","label","dx","dy","interpolateData","callback","index","interpolatedValue","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","createChartRect","xAxisOffset","yAxisOffset","x1","y1","x2","y2","createXAxis","chartRect","grid","labels","showGrid","classNames","horizontal","showLabel","createYAxis","vertical","labelAlign","text-anchor","projectPoint","optionsProvider","defaultOptions","responsiveOptions","optionsChangedCallbackFnc","applyOptions","currentOptions","baseOptions","mql","window","matchMedia","matches","mediaQueryListeners","addListener","catmullRom2bezier","crp","z","d","iLen","p","require","Line","createChart","seriesGroups","point","pathCoordinates","showPoint","showLine","svgPathString","lineSmooth","cr","k","l","line","changedOptions","addEventListener","update","Bar","zeroPoint","biPol","periodHalfWidth","bar","seriesBarDistance","barClasses","thin","thick","Pie","totalDataSum","startAngle","total","reduce","previousValue","currentValue","donut","donutWidth","center","endAngle","start","end","arcSweep","path","slice","style"],"mappings":"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","sourcesContent":["(function(root, factory) {\n  'use strict';\n\n  if(typeof exports === 'object') {\n    module.exports = factory();\n  }\n  else if(typeof define === 'function' && define.amd) {\n    define([], factory);\n  }\n  else {\n    root.Chartist = factory();\n  }\n\n}(this, function() {\n  'use strict';\n\n  // The Chartist core contains shared static functions\n  var Chartist = {};\n  Chartist.version = '0.1.6';\n\n  // Helps to simplify functional style code\n  Chartist.noop = function (n) {\n    return n;\n  };\n\n  // Generates a-z from number\n  Chartist.alphaNumerate = function (n) {\n    // Limit to a-z\n    return String.fromCharCode(97 + n % 26);\n  };\n\n  // Simple recursive object extend\n  Chartist.extend = function (target, source) {\n    target = target || {};\n    for (var prop in source) {\n      if (typeof source[prop] === 'object') {\n        target[prop] = Chartist.extend(target[prop], source[prop]);\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n    return target;\n  };\n\n  // Simple SVG dom manipulation functions\n  Chartist.svg = function(name, attributes, className, parent) {\n\n    var svgns = 'http://www.w3.org/2000/svg';\n\n    function attr(node, attributes) {\n      Object.keys(attributes).forEach(function(key) {\n        node.setAttribute(key, attributes[key]);\n      });\n\n      return node;\n    }\n\n    function elem(svg, name, attributes, className, parentNode) {\n      var node = document.createElementNS(svgns, name);\n      node._ctSvgElement = svg;\n\n      if(parentNode) {\n        parentNode.appendChild(node);\n      }\n\n      if(attributes) {\n        attr(node, attributes);\n      }\n\n      if(className) {\n        addClass(node, className);\n      }\n\n      return node;\n    }\n\n    function text(node, t) {\n      node.appendChild(document.createTextNode(t));\n    }\n\n    function empty(node) {\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n    }\n\n    function remove(node) {\n      node.parentNode.removeChild(node);\n    }\n\n    function classes(node) {\n      return node.getAttribute('class') ? node.getAttribute('class').trim().split(/\\s+/) : [];\n    }\n\n    function addClass(node, names) {\n      node.setAttribute('class',\n        classes(node)\n          .concat(names.trim().split(/\\s+/))\n          .filter(function(elem, pos, self) {\n            return self.indexOf(elem) === pos;\n          }).join(' ')\n      );\n    }\n\n    function removeClass(node, names) {\n      var removedClasses = names.trim().split(/\\s+/);\n\n      node.setAttribute('class', classes(node).filter(function(name) {\n        return removedClasses.indexOf(name) === -1;\n      }).join(' '));\n    }\n\n    return {\n      _node: elem(this, name, attributes, className, parent ? parent._node : undefined),\n      _parent: parent,\n      parent: function() {\n        return this._parent;\n      },\n      attr: function(attributes) {\n        attr(this._node, attributes);\n        return this;\n      },\n      empty: function() {\n        empty(this._node);\n        return this;\n      },\n      remove: function() {\n        remove(this._node);\n        return this;\n      },\n      elem: function(name, attributes, className) {\n        return Chartist.svg(name, attributes, className, this);\n      },\n      text: function(t) {\n        text(this._node, t);\n        return this;\n      },\n      addClass: function(names) {\n        addClass(this._node, names);\n        return this;\n      },\n      removeClass: function(names) {\n        removeClass(this._node, names);\n        return this;\n      },\n      classes: function() {\n        return classes(this._node);\n      }\n    };\n  };\n\n  // Get element height / width with fallback to svg BoundingBox or parent container dimensions\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985\n  Chartist.getHeight = function (svgElement) {\n    return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight;\n  };\n\n  Chartist.getWidth = function (svgElement) {\n    return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth;\n  };\n\n  // Create Chartist SVG element\n  Chartist.createSvg = function (query, width, height) {\n    // Get dom object from query or if already dom object just use it\n    var container = query.nodeType ? query : document.querySelector(query),\n      svg;\n\n    // If container was not found we throw up\n    if (!container) {\n      throw 'Container node with selector \"' + query + '\" not found';\n    }\n\n    // If already contains our svg object we clear it, set width / height and return\n    if (container._ctChart !== undefined) {\n      svg = container._ctChart.attr({\n        width: width || '100%',\n        height: height || '100%'\n      });\n      // Clear the draw if its already used before so we start fresh\n      svg.empty();\n\n    } else {\n      // Create svg object with width and height or use 100% as default\n      svg = Chartist.svg('svg').attr({\n        width: width || '100%',\n        height: height || '100%'\n      });\n\n      // Add the DOM node to our container\n      container.appendChild(svg._node);\n      container._ctChart = svg;\n    }\n\n    return svg;\n  };\n\n  // Convert data series into plain array\n  Chartist.getDataArray = function (data) {\n    var array = [];\n\n    for (var i = 0; i < data.series.length; i++) {\n      // If the series array contains an object with a data property we will use the property\n      // otherwise the value directly (array or number)\n      array[i] = typeof(data.series[i]) === 'object' && data.series[i].data !== undefined ?\n        data.series[i].data : data.series[i];\n    }\n\n    return array;\n  };\n\n  // Add missing values at the end of the arrays\n  Chartist.normalizeDataArray = function (dataArray, length) {\n    for (var i = 0; i < dataArray.length; i++) {\n      if (dataArray[i].length === length) {\n        continue;\n      }\n\n      for (var j = dataArray[i].length; j < length; j++) {\n        dataArray[i][j] = 0;\n      }\n    }\n\n    return dataArray;\n  };\n\n  Chartist.orderOfMagnitude = function (value) {\n    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n  };\n\n  Chartist.projectLength = function (svg, length, bounds, options) {\n    var availableHeight = Chartist.getAvailableHeight(svg, options);\n    return (length / bounds.range * availableHeight);\n  };\n\n  Chartist.getAvailableHeight = function (svg, options) {\n    return Chartist.getHeight(svg._node) - (options.chartPadding * 2) - options.axisX.offset;\n  };\n\n  // Get highest and lowest value of data array\n  Chartist.getHighLow = function (dataArray) {\n    var i,\n      j,\n      highLow = {\n        high: -Number.MAX_VALUE,\n        low: Number.MAX_VALUE\n      };\n\n    for (i = 0; i < dataArray.length; i++) {\n      for (j = 0; j < dataArray[i].length; j++) {\n        if (dataArray[i][j] > highLow.high) {\n          highLow.high = dataArray[i][j];\n        }\n\n        if (dataArray[i][j] < highLow.low) {\n          highLow.low = dataArray[i][j];\n        }\n      }\n    }\n\n    return highLow;\n  };\n\n  // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude\n  Chartist.getBounds = function (svg, normalizedData, options, referenceValue) {\n    var i,\n      newMin,\n      newMax,\n      bounds = Chartist.getHighLow(normalizedData);\n\n    // Overrides of high / low from settings\n    bounds.high = options.high || (options.high === 0 ? 0 : bounds.high);\n    bounds.low = options.low || (options.low === 0 ? 0 : bounds.low);\n\n    // Overrides of high / low based on reference value, it will make sure that the invisible reference value is\n    // used to generate the chart. This is useful when the chart always needs to contain the position of the\n    // invisible reference value in the view i.e. for bipolar scales.\n    if(referenceValue || referenceValue === 0) {\n      bounds.high = Math.max(referenceValue, bounds.high);\n      bounds.low = Math.min(referenceValue, bounds.low);\n    }\n\n    bounds.valueRange = bounds.high - bounds.low;\n    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);\n    bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.range = bounds.max - bounds.min;\n    bounds.step = Math.pow(10, bounds.oom);\n    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);\n\n    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace\n    while (true) {\n      var length = Chartist.projectLength(svg, bounds.step / 2, bounds, options);\n      if (length >= options.axisY.scaleMinSpace) {\n        bounds.step /= 2;\n      } else {\n        break;\n      }\n    }\n\n    // Narrow min and max based on new step\n    newMin = bounds.min;\n    newMax = bounds.max;\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      if (i + bounds.step < bounds.low) {\n        newMin += bounds.step;\n      }\n\n      if (i - bounds.step > bounds.high) {\n        newMax -= bounds.step;\n      }\n    }\n    bounds.min = newMin;\n    bounds.max = newMax;\n    bounds.range = bounds.max - bounds.min;\n\n    bounds.values = [];\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      bounds.values.push(i);\n    }\n\n    return bounds;\n  };\n\n  Chartist.calculateLabelOffset = function (svg, data, labelClass, labelInterpolationFnc, offsetFnc) {\n    var offset = 0;\n    for (var i = 0; i < data.length; i++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolated = labelInterpolationFnc(data[i], i);\n      if (!interpolated && interpolated !== 0) {\n        continue;\n      }\n\n      var label = svg.elem('text', {\n        dx: 0,\n        dy: 0\n      }, labelClass).text('' + interpolated);\n\n      // Check if this is the largest label and update offset\n      offset = Math.max(offset, offsetFnc(label._node));\n      // Remove label after offset Calculation\n      label.remove();\n    }\n\n    return offset;\n  };\n\n  // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering)\n  Chartist.interpolateData = function (data, labelInterpolationFnc, callback) {\n    for (var index = 0; index < data.length; index++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolatedValue = labelInterpolationFnc(data[index], index);\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        continue;\n      }\n\n      callback(data, index, interpolatedValue);\n    }\n  };\n\n  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n    return {\n      x: centerX + (radius * Math.cos(angleInRadians)),\n      y: centerY + (radius * Math.sin(angleInRadians))\n    };\n  };\n\n  // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right\n  Chartist.createChartRect = function (svg, options, xAxisOffset, yAxisOffset) {\n    return {\n      x1: options.chartPadding + yAxisOffset,\n      y1: (options.height || Chartist.getHeight(svg._node)) - options.chartPadding - xAxisOffset,\n      x2: (options.width || Chartist.getWidth(svg._node)) - options.chartPadding,\n      y2: options.chartPadding,\n      width: function () {\n        return this.x2 - this.x1;\n      },\n      height: function () {\n        return this.y1 - this.y2;\n      }\n    };\n  };\n\n  Chartist.createXAxis = function (chartRect, data, grid, labels, options) {\n    // Create X-Axis\n    data.labels.forEach(function(value, index) {\n      var interpolatedValue = options.axisX.labelInterpolationFnc(value, index),\n        pos = chartRect.x1 + chartRect.width() / data.labels.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisX.showGrid) {\n        grid.elem('line', {\n          x1: pos,\n          y1: chartRect.y1,\n          x2: pos,\n          y2: chartRect.y2\n        }, [options.classNames.grid, options.classNames.horizontal].join(' '));\n      }\n\n      if (options.axisX.showLabel) {\n        // Use config offset for setting labels of\n        var label = labels.elem('text', {\n            dx: pos + 2\n          }, [options.classNames.label, options.classNames.horizontal].join(' ')).text('' + interpolatedValue);\n\n        // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n        label.attr({\n          dy: chartRect.y1 + Chartist.getHeight(label._node) + options.axisX.offset\n        });\n      }\n    });\n  };\n\n  Chartist.createYAxis = function (chartRect, bounds, grid, labels, offset, options) {\n    // Create Y-Axis\n    bounds.values.forEach(function(value, index) {\n      var interpolatedValue = options.axisY.labelInterpolationFnc(value, index),\n        pos = chartRect.y1 - chartRect.height() / bounds.values.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisY.showGrid) {\n        grid.elem('line', {\n          x1: chartRect.x1,\n          y1: pos,\n          x2: chartRect.x2,\n          y2: pos\n        }, [options.classNames.grid, options.classNames.vertical].join(' '));\n      }\n\n      if (options.axisY.showLabel) {\n        labels.elem('text', {\n          dx: options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding,\n          dy: pos - 2,\n          'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n        }, [options.classNames.label, options.classNames.vertical].join(' ')).text('' + interpolatedValue);\n      }\n    });\n  };\n\n  Chartist.projectPoint = function (chartRect, bounds, data, index) {\n    return {\n      x: chartRect.x1 + chartRect.width() / data.length * index,\n      y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step)\n    };\n  };\n\n  // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches\n  // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one\n  Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) {\n    var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options),\n      currentOptions,\n      mediaQueryListeners = [],\n      i;\n\n    function applyOptions() {\n      currentOptions = Chartist.extend({}, baseOptions);\n\n      if (responsiveOptions) {\n        for (i = 0; i < responsiveOptions.length; i++) {\n          var mql = window.matchMedia(responsiveOptions[i][0]);\n          if (mql.matches) {\n            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);\n          }\n        }\n      }\n\n      optionsChangedCallbackFnc(currentOptions);\n      return currentOptions;\n    }\n\n    if (!window.matchMedia) {\n      throw 'window.matchMedia not found! Make sure you\\'re using a polyfill.';\n    } else if (responsiveOptions) {\n\n      for (i = 0; i < responsiveOptions.length; i++) {\n        var mql = window.matchMedia(responsiveOptions[i][0]);\n        mql.addListener(applyOptions);\n        mediaQueryListeners.push(mql);\n      }\n    }\n\n    return applyOptions();\n  };\n\n  // http://schepers.cc/getting-to-the-point\n  Chartist.catmullRom2bezier = function (crp, z) {\n    var d = [];\n    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n      var p = [\n        {x: +crp[i - 2], y: +crp[i - 1]},\n        {x: +crp[i], y: +crp[i + 1]},\n        {x: +crp[i + 2], y: +crp[i + 3]},\n        {x: +crp[i + 4], y: +crp[i + 5]}\n      ];\n      if (z) {\n        if (!i) {\n          p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n        } else if (iLen - 4 === i) {\n          p[3] = {x: +crp[0], y: +crp[1]};\n        } else if (iLen - 2 === i) {\n          p[2] = {x: +crp[0], y: +crp[1]};\n          p[3] = {x: +crp[2], y: +crp[3]};\n        }\n      } else {\n        if (iLen - 4 === i) {\n          p[3] = p[2];\n        } else if (!i) {\n          p[0] = {x: +crp[i], y: +crp[i + 1]};\n        }\n      }\n      d.push(\n        [\n          (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n          (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n          (p[1].x + 6 * p[2].x - p[3].x) / 6,\n          (p[1].y + 6 * p[2].y - p[3].y) / 6,\n          p[2].x,\n          p[2].y\n        ]\n      );\n    }\n\n    return d;\n  };\n\n  return Chartist;\n\n}));","// UMD, continue down for module definition\n(function(root, factory) {\n  'use strict';\n\n  if(typeof exports === 'object') {\n    module.exports = factory(require('chartist-core'));\n  }\n  else if(typeof define === 'function' && define.amd) {\n    define(['chartist-core'], factory);\n  }\n  else {\n    root.Chartist.Line = factory(root.Chartist);\n  }\n\n}(this, function(Chartist) {\n  // Chartist line chart\n  'use strict';\n\n  return function Line (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 30\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        low: undefined,\n        high: undefined,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      svg;\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds,\n        normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n      // Create new svg object\n      svg = Chartist.createSvg(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(svg, normalizedData, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          svg,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          svg,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = svg.elem('g'),\n        grid = svg.elem('g');\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = svg.elem('g');\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass([\n          options.classNames.series,\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n        ].join(' '));\n\n        var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], 0),\n          pathCoordinates = [p.x, p.y],\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          // Small offset for Firefox to render squares correctly\n          point = seriesGroups[i].elem('line', {\n            x1: p.x,\n            y1: p.y,\n            x2: p.x + 0.01,\n            y2: p.y\n          }, options.classNames.point);\n        }\n\n        // First point is created, continue with rest\n        for (var j = 1; j < normalizedData[i].length; j++) {\n          p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j);\n          pathCoordinates.push(p.x, p.y);\n\n          //If we should show points we need to create them now to avoid secondary loop\n          // Small offset for Firefox to render squares correctly\n          if (options.showPoint) {\n            point = seriesGroups[i].elem('line', {\n              x1: p.x,\n              y1: p.y,\n              x2: p.x + 0.01,\n              y2: p.y\n            }, options.classNames.point);\n          }\n        }\n\n        if (options.showLine) {\n          var svgPathString = 'M' + pathCoordinates[0] + ',' + pathCoordinates[1] + ' ';\n\n          // If smoothed path and path has more than two points then use catmull rom to bezier algorithm\n          if (options.lineSmooth && pathCoordinates.length > 4) {\n\n            var cr = Chartist.catmullRom2bezier(pathCoordinates);\n            for(var k = 0; k < cr.length; k++) {\n              svgPathString += 'C' + cr[k].join();\n            }\n          } else {\n            for(var l = 3; l < pathCoordinates.length; l += 2) {\n              svgPathString += 'L ' + pathCoordinates[l - 1] + ',' + pathCoordinates[l];\n            }\n          }\n\n          seriesGroups[i].elem('path', {\n            d: svgPathString\n          }, options.classNames.line);\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}));","// UMD, continue down for module definition\n(function(root, factory) {\n  'use strict';\n\n  if(typeof exports === 'object') {\n    module.exports = factory(require('chartist-core'));\n  }\n  else if(typeof define === 'function' && define.amd) {\n    define(['chartist-core'], factory);\n  }\n  else {\n    root.Chartist.Bar = factory(root.Chartist);\n  }\n\n}(this, function(Chartist) {\n  // Chartist Bar chart\n  'use strict';\n\n  return function Bar (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 40\n        },\n        width: undefined,\n        height: undefined,\n        high: undefined,\n        low: undefined,\n        chartPadding: 5,\n        seriesBarDistance: 15,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          bar: 'ct-bar',\n          thin: 'ct-thin',\n          thick: 'ct-thick',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      svg;\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds,\n        normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n      // Create new svg element\n      svg = Chartist.createSvg(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(svg, normalizedData, options, 0);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          svg,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          svg,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = svg.elem('g'),\n        grid = svg.elem('g'),\n        // Projected 0 point\n        zeroPoint = Chartist.projectPoint(chartRect, bounds, [0], 0);\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.\n        var biPol = i - (data.series.length - 1) / 2,\n        // Half of the period with between vertical grid lines used to position bars\n          periodHalfWidth = chartRect.width() / normalizedData[i].length / 2;\n\n        seriesGroups[i] = svg.elem('g');\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass([\n          options.classNames.series,\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n        ].join(' '));\n\n        for(var j = 0; j < normalizedData[i].length; j++) {\n          var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j),\n            bar;\n\n          // Offset to center bar between grid lines and using bi-polar offset for multiple series\n          // TODO: Check if we should really be able to add classes to the series. Should be handles with SASS and semantic / specific selectors\n          p.x += periodHalfWidth + (biPol * options.seriesBarDistance);\n\n          bar = seriesGroups[i].elem('line', {\n            x1: p.x,\n            y1: zeroPoint.y,\n            x2: p.x,\n            y2: p.y\n          }, options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : ''));\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}));","// UMD, continue down for module definition\n(function(root, factory) {\n  'use strict';\n\n  if(typeof exports === 'object') {\n    module.exports = factory(require('chartist-core'));\n  }\n  else if(typeof define === 'function' && define.amd) {\n    define(['chartist-core'], factory);\n  }\n  else {\n    root.Chartist.Pie = factory(root.Chartist);\n  }\n\n}(this, function(Chartist) {\n  // Chartist Pie & Donut chart\n  'use strict';\n\n  return function Pie (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        classNames: {\n          series: 'ct-series',\n          slice: 'ct-slice',\n          donut: 'ct-donut'\n        },\n        startAngle: 0,\n        total: undefined,\n        donut: false,\n        donutWidth: 60\n      },\n      currentOptions,\n      svg;\n\n    function createChart(options) {\n      var seriesGroups = [],\n        chartRect,\n        radius,\n        totalDataSum,\n        startAngle = options.startAngle,\n        dataArray = Chartist.getDataArray(data);\n\n      // Create SVG.js draw\n      svg = Chartist.createSvg(query, options.width, options.height);\n      // Calculate charting rect\n      chartRect = Chartist.createChartRect(svg, options, 0, 0);\n      // Get biggest circle radius possible within chartRect\n      radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);\n      // Calculate total of all series to get reference value or use total reference from optional options\n      totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {\n        return previousValue + currentValue;\n      }, 0);\n\n      // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside\n      // Unfortunately this is not possible with the current SVG Spec\n      // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html\n      radius -= options.donut ? options.donutWidth / 2  : 0;\n\n      // Calculate end angle based on total sum and current data value and offset with padding\n      var center = {\n        x: chartRect.x1 + chartRect.width() / 2,\n        y: chartRect.y2 + chartRect.height() / 2\n      };\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = svg.elem('g');\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass([\n          options.classNames.series,\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n        ].join(' '));\n\n        var endAngle = startAngle + dataArray[i] / totalDataSum * 360;\n        // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle\n        // with Z and use 359.99 degrees\n        if(endAngle - startAngle === 360) {\n          endAngle -= 0.01;\n        }\n\n        var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)),\n        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle),\n        arcSweep = endAngle - startAngle <= 180 ? '0' : '1',\n        d = [\n          // Start at the end point from the cartesian coordinates\n          'M', end.x, end.y,\n          // Draw arc\n          'A', radius, radius, 0, arcSweep, 0, start.x, start.y\n        ];\n\n        // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie\n        if(options.donut === false) {\n          d.push('L', center.x, center.y);\n        }\n\n        // Create the SVG path\n        // If this is a donut chart we add the donut class, otherwise just a regular slice\n        var path = seriesGroups[i].elem('path', {\n          d: d.join(' ')\n        }, options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));\n\n        // If this is a donut, we add the stroke-width as style attribute\n        if(options.donut === true) {\n          path.attr({\n            'style': 'stroke-width: ' + (+options.donutWidth) + 'px'\n          });\n        }\n\n        // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues\n        // (except for last slice)\n        startAngle = endAngle;\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}));"]}