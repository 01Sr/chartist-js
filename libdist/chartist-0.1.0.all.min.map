{"version":3,"file":"chartist-0.1.0.all.min.js","sources":["../source/scripts/chartist.core.js","../source/scripts/chartist.line.js","../source/scripts/chartist.bar.js"],"names":["document","window","undefined","Chartist","version","noop","n","alphaNumerate","String","fromCharCode","extend","target","source","prop","each","array","callback","i","length","value","call","getHeight","svgElement","clientHeight","Math","round","getBBox","height","parentNode","getWidth","clientWidth","width","createPaper","query","paper","container","nodeType","querySelector","__chartistPaper","attr","clear","Snap","appendChild","node","getDataArray","data","series","normalizeDataArray","dataArray","j","orderOfMagnitude","floor","log","abs","LN10","projectLength","bounds","options","availableHeight","getAvailableHeight","range","chartPadding","axisX","offset","getHighLow","highLow","high","Number","MIN_VALUE","low","MAX_VALUE","getBounds","newMin","newMax","valueRange","oom","min","pow","max","ceil","step","numberOfSteps","axisY","scaleMinSpace","values","push","calculateLabelOffset","labelClass","labelInterpolationFnc","offsetFnc","interpolated","label","text","setAttribute","remove","interpolateData","index","interpolatedValue","createChartRect","xAxisOffset","yAxisOffset","x1","y1","x2","y2","this","createXAxis","chartRect","grid","labels","pos","showGrid","line","classNames","horizontal","join","add","showLabel","y","createYAxis","vertical","labelAlign","text-anchor","projectPoint","x","optionsProvider","defaultOptions","responsiveOptions","optionsChangedCallbackFnc","applyOptions","currentOptions","baseOptions","mql","matchMedia","matches","mediaQueryListeners","addListener","Line","createChart","seriesGroups","g","className","point","p","path","lineSmooth","showPoint","append","showLine","snapPath","prepend","changedOptions","addEventListener","update","Bar","biPol","periodHalfWidth","bar","seriesBarDistance","barClasses","thin","thick"],"mappings":"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","sourcesContent":["(function (document, window, undefined) {\n  'use strict';\n\n  // Export chartist namespace\n  var Chartist = window.Chartist = window.Chartist || {};\n\n  Chartist.version = '0.0.3';\n\n  // Helps to simplify functional style code\n  Chartist.noop = function (n) {\n    return n;\n  };\n\n  // Generates a-z from number\n  Chartist.alphaNumerate = function (n) {\n    // Limit to a-z\n    return String.fromCharCode(97 + n % 26);\n  };\n\n  // Simple recursive object extend\n  Chartist.extend = function (target, source) {\n    target = target || {};\n    for (var prop in source) {\n      if (typeof source[prop] === 'object') {\n        target[prop] = Chartist.extend(target[prop], source[prop]);\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n    return target;\n  };\n\n  // Simple array each function\n  Chartist.each = function (array, callback) {\n    for (var i = 0; i < array.length; i++) {\n      var value = callback.call(array[i], i, array[i]);\n\n      if (value === false) {\n        break;\n      }\n    }\n  };\n\n  // Get element height / width with fallback to svg BoundingBox or parent container dimensions\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985\n  Chartist.getHeight = function (svgElement) {\n    return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight;\n  };\n\n  Chartist.getWidth = function (svgElement) {\n    return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth;\n  };\n\n  // Create Chartist container and instantiate snap paper\n  Chartist.createPaper = function (query, width, height) {\n    // Get dom object from query or if already dom object just use it\n    var container = query.nodeType ? query : document.querySelector(query),\n      paper;\n\n    // If container was not found we throw up\n    if (!container) {\n      throw 'Container node with selector \"' + query + '\" not found';\n    }\n\n    // If already contains paper we clear it, set width / height and return\n    if (container.__chartistPaper !== undefined) {\n      paper = container.__chartistPaper.attr({\n        width: width || '100%',\n        height: height || '100%'\n      });\n      // Clear the paper if its already used before so we start fresh\n      paper.clear();\n\n    } else {\n      // Create Snap paper with width and height or use 100% as default\n      paper = Snap(width || '100%', height || '100%');\n      if (!paper) {\n        throw 'Could not instantiate Snap.js!';\n      }\n      // Append the snap SVG to our container\n      container.appendChild(paper.node);\n\n      // Set paper in DOM element so we have a trace for later\n      container.__chartistPaper = paper;\n    }\n\n    return paper;\n  };\n\n  // Convert data series into plain array\n  Chartist.getDataArray = function (data) {\n    var array = [];\n\n    for (var i = 0; i < data.series.length; i++) {\n      array[i] = data.series[i].data;\n    }\n\n    return array;\n  };\n\n  // Add missing values at the end of the arrays\n  Chartist.normalizeDataArray = function (dataArray, length) {\n    for (var i = 0; i < dataArray.length; i++) {\n      if (dataArray[i].length === length) {\n        continue;\n      }\n\n      for (var j = dataArray[i].length; j < length; j++) {\n        dataArray[i][j] = 0;\n      }\n    }\n\n    return dataArray;\n  };\n\n  Chartist.orderOfMagnitude = function (value) {\n    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n  };\n\n  Chartist.projectLength = function (paper, length, bounds, options) {\n    var availableHeight = Chartist.getAvailableHeight(paper, options);\n    return (length / bounds.range * availableHeight);\n  };\n\n  Chartist.getAvailableHeight = function (paper, options) {\n    return Chartist.getHeight(paper.node) - (options.chartPadding * 2) - options.axisX.offset;\n  };\n\n  // Get highest and lowest value of data array\n  Chartist.getHighLow = function (dataArray) {\n    var i,\n      j,\n      highLow = {\n        high: Number.MIN_VALUE,\n        low: Number.MAX_VALUE\n      };\n\n    for (i = 0; i < dataArray.length; i++) {\n      for (j = 0; j < dataArray[i].length; j++) {\n        if (dataArray[i][j] > highLow.high) {\n          highLow.high = dataArray[i][j];\n        }\n\n        if (dataArray[i][j] < highLow.low) {\n          highLow.low = dataArray[i][j];\n        }\n      }\n    }\n\n    return highLow;\n  };\n\n  // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude\n  Chartist.getBounds = function (paper, dataArray, options, high, low) {\n    var i,\n      newMin,\n      newMax,\n      bounds = Chartist.getHighLow(dataArray);\n\n    // Overrides of high / low from settings\n    bounds.high = options.high || (options.high === 0 ? 0 : bounds.high);\n    bounds.low = options.low || (options.low === 0 ? 0 : bounds.low);\n\n    // Overrides of high / low from function call (highest priority)\n    bounds.high = high || (high === 0 ? 0 : bounds.high);\n    bounds.low = low || (low === 0 ? 0 : bounds.low);\n\n    bounds.valueRange = bounds.high - bounds.low;\n    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);\n    bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.range = bounds.max - bounds.min;\n    bounds.step = Math.pow(10, bounds.oom);\n    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);\n\n    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace\n    while (true) {\n      var length = Chartist.projectLength(paper, bounds.step / 2, bounds, options);\n      if (length >= options.axisY.scaleMinSpace) {\n        bounds.step /= 2;\n      } else {\n        break;\n      }\n    }\n\n    // Narrow min and max based on new step\n    newMin = bounds.min;\n    newMax = bounds.max;\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      if (i + bounds.step < bounds.low) {\n        newMin += bounds.step;\n      }\n\n      if (i - bounds.step > bounds.high) {\n        newMax -= bounds.step;\n      }\n    }\n    bounds.min = newMin;\n    bounds.max = newMax;\n    bounds.range = bounds.max - bounds.min;\n\n    bounds.values = [];\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      bounds.values.push(i);\n    }\n\n    return bounds;\n  };\n\n  Chartist.calculateLabelOffset = function (paper, data, labelClass, labelInterpolationFnc, offsetFnc) {\n    var offset = 0;\n    for (var i = 0; i < data.length; i++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolated = labelInterpolationFnc(data[i], i);\n      if (!interpolated && interpolated !== 0) {\n        continue;\n      }\n\n      var label = paper.text(0, 0, '' + interpolated);\n      label.node.setAttribute('class', labelClass);\n\n      // Check if this is the largest label and update offset\n      offset = Math.max(offset, offsetFnc(label.node));\n      // Remove label after offset Calculation\n      label.remove();\n    }\n\n    return offset;\n  };\n\n  // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering)\n  Chartist.interpolateData = function (data, labelInterpolationFnc, callback) {\n    for (var index = 0; index < data.length; index++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolatedValue = labelInterpolationFnc(data[index], index);\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        continue;\n      }\n\n      callback(data, index, interpolatedValue);\n    }\n  };\n\n  // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right\n  Chartist.createChartRect = function (paper, options, xAxisOffset, yAxisOffset) {\n    return {\n      x1: options.chartPadding + yAxisOffset,\n      y1: (options.height || Chartist.getHeight(paper.node)) - options.chartPadding - xAxisOffset,\n      x2: (options.width || Chartist.getWidth(paper.node)) - options.chartPadding,\n      y2: options.chartPadding,\n      width: function () {\n        return this.x2 - this.x1;\n      },\n      height: function () {\n        return this.y1 - this.y2;\n      }\n    };\n  };\n\n  Chartist.createXAxis = function(paper, chartRect, data, grid, labels, options) {\n    // Create X-Axis\n    Chartist.each(data.labels, function (index, value) {\n      var interpolatedValue = options.axisX.labelInterpolationFnc(value, index),\n        pos = chartRect.x1 + chartRect.width() / data.labels.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if(!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisX.showGrid) {\n        var line = paper.line(pos, chartRect.y1, pos, chartRect.y2);\n        line.node.setAttribute('class', [options.classNames.grid, options.classNames.horizontal].join(' '));\n        grid.add(line);\n      }\n\n      if (options.axisX.showLabel) {\n        // Use config offset for setting labels of\n        var label = paper.text(pos + 2, 0, '' + interpolatedValue);\n        label.node.setAttribute('class', [options.classNames.label, options.classNames.horizontal].join(' '));\n\n        // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n        label.attr({\n          y: chartRect.y1 + Chartist.getHeight(label.node) + options.axisX.offset\n        });\n\n        labels.add(label);\n      }\n    });\n  };\n\n  Chartist.createYAxis = function(paper, chartRect, bounds, grid, labels, offset, options) {\n    // Create Y-Axis\n    Chartist.each(bounds.values, function (index, value) {\n      var interpolatedValue = options.axisY.labelInterpolationFnc(value, index),\n        pos = chartRect.y1 - chartRect.height() / bounds.values.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if(!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisY.showGrid) {\n        var line = paper.line(chartRect.x1, pos, chartRect.x2, pos);\n        line.node.setAttribute('class', options.classNames.grid + ' ' + options.classNames.vertical);\n        grid.add(line);\n      }\n\n      if (options.axisY.showLabel) {\n        // Position later\n        //TODO: make padding of 2px configurable\n        //TODO: Check for refacoring\n        var label = paper.text(options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding,\n            pos - 2, '' + interpolatedValue);\n        label.node.setAttribute('class', options.classNames.label + ' ' + options.classNames.vertical);\n\n        // Set text-anchor based on alignment\n        label.attr({\n          'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n        });\n\n        labels.add(label);\n      }\n    });\n  };\n\n  Chartist.projectPoint = function(chartRect, bounds, data, index) {\n    return {\n      x: chartRect.x1 + chartRect.width() / data.length * index,\n      y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step)\n    };\n  };\n\n  // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches\n  // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one\n  Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) {\n    var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options),\n      currentOptions,\n      mediaQueryListeners = [],\n      i;\n\n    function applyOptions() {\n      currentOptions = Chartist.extend({}, baseOptions);\n\n      if (responsiveOptions) {\n        for (i = 0; i < responsiveOptions.length; i++) {\n          var mql = window.matchMedia(responsiveOptions[i][0]);\n          if (mql.matches) {\n            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);\n          }\n        }\n      }\n\n      optionsChangedCallbackFnc(currentOptions);\n      return currentOptions;\n    }\n\n    if (!window.matchMedia) {\n      throw 'window.matchMedia not found! Make sure you\\'re using a polyfill.';\n    } else if (responsiveOptions) {\n\n      for (i = 0; i < responsiveOptions.length; i++) {\n        var mql = window.matchMedia(responsiveOptions[i][0]);\n        mql.addListener(applyOptions);\n        mediaQueryListeners.push(mql);\n      }\n    }\n\n    return applyOptions();\n  };\n}(document, window));","// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Line = Chartist.Line || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 20\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      paper,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Create new paper the stage\n      paper = Chartist.createPaper(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(paper, dataArray, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(paper, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = paper.g(),\n        grid = paper.g();\n\n      Chartist.createXAxis(paper, chartRect, data, grid, labels, options);\n      Chartist.createYAxis(paper, chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = paper.g();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].node.setAttribute('class', options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, 0),\n          path = 'M' + p.x + ',' + p.y + ' ' + (options.lineSmooth ? 'R' : 'L'),\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          point = paper.line(p.x, p.y, p.x, p.y);\n          point.node.setAttribute('class', options.classNames.point);\n          seriesGroups[i].append(point);\n        }\n\n        // First point is created, continue with rest\n        for (var j = 1; j < data.series[i].data.length; j++) {\n          p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, j);\n          path += ' ' + p.x + ',' + p.y;\n\n          //If we should show points we need to create them now to avoid secondary loop\n          if (options.showPoint) {\n            point = paper.line(p.x, p.y, p.x, p.y);\n            point.node.setAttribute('class', options.classNames.point);\n            seriesGroups[i].append(point);\n          }\n        }\n\n        if (options.showLine) {\n          var snapPath = paper.path(path);\n          snapPath.node.setAttribute('class', options.classNames.line);\n          seriesGroups[i].prepend(snapPath);\n        }\n\n        paper.add(seriesGroups[i]);\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));","// Chartist Bar chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Bar = Chartist.Bar || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 40\n        },\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        seriesBarDistance: 15,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          bar: 'ct-bar',\n          thin: 'ct-thin',\n          thick: 'ct-thick',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      paper,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Create new paper the stage\n      paper = Chartist.createPaper(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(paper, dataArray, options, null, 0);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(paper, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = paper.g(),\n        grid = paper.g();\n\n      Chartist.createXAxis(paper, chartRect, data, grid, labels, options);\n      Chartist.createYAxis(paper, chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.\n        var biPol = i - (data.series.length - 1) / 2,\n        // Half of the period with between vertical grid lines used to position bars\n          periodHalfWidth = chartRect.width() / data.series[i].data.length / 2;\n\n        seriesGroups[i] = paper.g();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].node.setAttribute('class', options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        for(var j = 0; j < data.series[i].data.length; j++) {\n          var p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, j),\n            bar;\n\n          // Offset to center bar between grid lines and using bi-polar offset for multiple series\n          p.x += periodHalfWidth + (biPol * options.seriesBarDistance);\n\n          bar = paper.line(p.x, chartRect.y1, p.x, p.y);\n          bar.node.setAttribute('class', options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : ''));\n          seriesGroups[i].prepend(bar);\n        }\n\n        paper.add(seriesGroups[i]);\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}