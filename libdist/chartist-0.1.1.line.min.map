{"version":3,"file":"chartist-0.1.1.line.min.js","sources":["../source/scripts/chartist.line.js"],"names":["document","window","Chartist","undefined","Line","query","data","options","responsiveOptions","createChart","xAxisOffset","yAxisOffset","bounds","seriesGroups","paper","createPaper","width","height","getBounds","dataArray","axisX","offset","showLabel","calculateLabelOffset","labels","classNames","label","horizontal","join","labelInterpolationFnc","getHeight","axisY","values","getWidth","chartRect","createChartRect","g","grid","createXAxis","createYAxis","i","series","length","node","setAttribute","className","alphaNumerate","point","p","projectPoint","path","x","y","lineSmooth","showPoint","line","append","j","showLine","snapPath","prepend","add","currentOptions","defaultOptions","showGrid","noop","labelAlign","scaleMinSpace","chartPadding","vertical","normalizeDataArray","getDataArray","optionsProvider","changedOptions","addEventListener","version","update"],"mappings":"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","sourcesContent":["// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Line = Chartist.Line || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 20\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      paper,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Create new paper the stage\n      paper = Chartist.createPaper(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(paper, dataArray, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          paper,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(paper, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = paper.g(),\n        grid = paper.g();\n\n      Chartist.createXAxis(paper, chartRect, data, grid, labels, options);\n      Chartist.createYAxis(paper, chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = paper.g();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].node.setAttribute('class', options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, 0),\n          path = 'M' + p.x + ',' + p.y + ' ' + (options.lineSmooth ? 'R' : 'L'),\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          // Small offset for Firefox to render squares correctly\n          point = paper.line(p.x, p.y, p.x + 0.01, p.y);\n          point.node.setAttribute('class', options.classNames.point);\n          seriesGroups[i].append(point);\n        }\n\n        // First point is created, continue with rest\n        for (var j = 1; j < data.series[i].data.length; j++) {\n          p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, j);\n          path += ' ' + p.x + ',' + p.y;\n\n          //If we should show points we need to create them now to avoid secondary loop\n          // Small offset for Firefox to render squares correctly\n          if (options.showPoint) {\n            point = paper.line(p.x, p.y, p.x  + 0.01, p.y);\n            point.node.setAttribute('class', options.classNames.point);\n            seriesGroups[i].append(point);\n          }\n        }\n\n        if (options.showLine) {\n          var snapPath = paper.path(path);\n          snapPath.node.setAttribute('class', options.classNames.line);\n          seriesGroups[i].prepend(snapPath);\n        }\n\n        paper.add(seriesGroups[i]);\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}